// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";

function statusToFloat(s) {
  return [
            "Unsorted",
            "Future",
            "NowIfTime",
            "NowMustDo",
            "Underway",
            "Paused",
            "ResolveDone",
            "ResolveNo",
            "ArchiveDone",
            "ArchiveNo"
          ].findIndex(function (a) {
              return a === s;
            });
}

function statusStringShort(s) {
  switch (s) {
    case "Unsorted" :
        return "";
    case "Future" :
        return "Future";
    case "NowIfTime" :
        return "If Time";
    case "NowMustDo" :
        return "Must Do";
    case "Underway" :
        return "Underway";
    case "Paused" :
        return "Paused";
    case "ResolveDone" :
    case "ArchiveDone" :
        return "Done";
    case "ResolveNo" :
    case "ArchiveNo" :
        return "No";
    
  }
}

function statusString(s) {
  switch (s) {
    case "Unsorted" :
        return "Unsorted";
    case "Future" :
        return "Future";
    case "NowIfTime" :
        return "If Time";
    case "NowMustDo" :
        return "Must Do";
    case "Underway" :
        return "Underway";
    case "Paused" :
        return "Paused";
    case "ResolveDone" :
        return "Done";
    case "ResolveNo" :
        return "No";
    case "ArchiveDone" :
        return "Done & Archived";
    case "ArchiveNo" :
        return "No & Archived";
    
  }
}

function statusColor(s) {
  switch (s) {
    case "Unsorted" :
        return "var(--lightGray)";
    case "Future" :
        return "var(--lightBlue)";
    case "NowIfTime" :
    case "NowMustDo" :
        return "var(--lightOrange)";
    case "Underway" :
    case "Paused" :
        return "var(--lightGreen)";
    case "ResolveDone" :
    case "ResolveNo" :
    case "ArchiveDone" :
    case "ArchiveNo" :
        return "var(--lightPurple)";
    
  }
}

function statusColorText(s) {
  switch (s) {
    case "Unsorted" :
        return "var(--darkGray)";
    case "Future" :
        return "var(--darkBlue)";
    case "NowIfTime" :
    case "NowMustDo" :
        return "var(--darkOrange)";
    case "Underway" :
    case "Paused" :
        return "var(--darkGreen)";
    case "ResolveDone" :
    case "ResolveNo" :
    case "ArchiveDone" :
    case "ArchiveNo" :
        return "var(--darkPurple)";
    
  }
}

function statusIsResolved(s) {
  switch (s) {
    case "ResolveDone" :
    case "ResolveNo" :
        return true;
    default:
      return false;
  }
}

function getTodoId(s) {
  return "todo-" + s;
}

function getTodoInputId(s) {
  return "todo-input-" + s;
}

function getProjectId(s) {
  return "project-" + s;
}

function getProjectInputId(s) {
  return "project-input-" + s;
}

function getIdFromId(s) {
  if (s.includes("todo-")) {
    return Core__Option.map(s.split("todo-")[1], (function (v) {
                  return v;
                }));
  } else if (s.includes("project-")) {
    return Core__Option.map(s.split("project-")[1], (function (v) {
                  return v;
                }));
  } else {
    return ;
  }
}

var listItemClass = "class-list-item";

var todoInputClass = "class-list-todo-input";

export {
  statusToFloat ,
  statusStringShort ,
  statusString ,
  statusColor ,
  statusColorText ,
  statusIsResolved ,
  getTodoId ,
  getTodoInputId ,
  getProjectId ,
  getProjectInputId ,
  getIdFromId ,
  listItemClass ,
  todoInputClass ,
}
/* No side effect */
