// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Types from "./Types.res.mjs";
import * as React from "react";
import * as Common from "./Common.res.mjs";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Tb from "react-icons/tb";
import * as JsxRuntime from "react/jsx-runtime";
import ReactTextareaAutosize from "react-textarea-autosize";

function Project(props) {
  var newTodoAfter = props.newTodoAfter;
  var handleHide = props.handleHide;
  var projectToMoveHandleMouseEnter = props.projectToMoveHandleMouseEnter;
  var projectToMoveHandleMouseDown = props.projectToMoveHandleMouseDown;
  var itemToMoveHandleMouseEnter = props.itemToMoveHandleMouseEnter;
  var setDisplayElement = props.setDisplayElement;
  var setSelectedElement = props.setSelectedElement;
  var updateProject = props.updateProject;
  var project = props.project;
  var projectRef = React.useRef(null);
  var inputRef = React.useRef(null);
  var isSelected = Caml_obj.equal(props.selectedElement, {
        TAG: "Project",
        _0: project.id
      });
  var onKeyDownProject = function (e) {
    if (isSelected) {
      return Common.mapNullable(projectRef.current, (function (dom) {
                    if (e.key === "ArrowUp") {
                      e.preventDefault();
                      Common.focusPreviousClass(Types.listItemClass, dom);
                    }
                    if (e.key === "ArrowDown") {
                      e.preventDefault();
                      Common.focusNextClass(Types.listItemClass, dom);
                    }
                    if (e.key === "Backspace" && e.metaKey) {
                      Common.mapNullable(projectRef.current, (function (containerEl) {
                              Common.focusPreviousClass(Types.listItemClass, containerEl);
                            }));
                    }
                    if (e.key === "Enter" && e.metaKey) {
                      newTodoAfter(undefined, undefined);
                    }
                    if (e.key === "Enter") {
                      e.preventDefault();
                      Common.mapNullable(inputRef.current, (function (inputEl) {
                              inputEl.focus();
                              inputEl.selectionStart = Caml_option.nullable_to_opt(inputEl.selectionEnd);
                            }));
                    }
                    if (e.key === "Escape") {
                      setSelectedElement(function (param) {
                            
                          });
                      setDisplayElement(function (param) {
                            
                          });
                      dom.blur();
                      return ;
                    }
                    
                  }));
    }
    
  };
  var onKeyDownInput = function (e) {
    if (isSelected) {
      if (e.key === "Escape") {
        e.stopPropagation();
        Common.mapNullable(projectRef.current, (function (dom) {
                dom.focus();
              }));
      }
      return Common.mapNullable(inputRef.current, (function (dom) {
                    var cursorPosition = Core__Option.getOr(Caml_option.nullable_to_opt(dom.selectionStart), 0);
                    var inputValueLength = dom.value.length;
                    if (e.key === "ArrowUp") {
                      e.stopPropagation();
                      if (cursorPosition === 0) {
                        e.preventDefault();
                        Common.mapNullable(projectRef.current, (function (dom) {
                                dom.focus();
                              }));
                      }
                      
                    }
                    if (e.key === "ArrowDown") {
                      e.stopPropagation();
                      if (cursorPosition === inputValueLength) {
                        e.preventDefault();
                        Common.mapNullable(projectRef.current, (function (dom) {
                                dom.focus();
                              }));
                      }
                      
                    }
                    if (e.key === "Enter" && cursorPosition === inputValueLength) {
                      e.stopPropagation();
                      e.preventDefault();
                      return newTodoAfter(undefined, undefined);
                    }
                    
                  }));
    }
    
  };
  var handleHideAll = function (param) {
    updateProject(project.id, (function (p) {
            return handleHide(true, undefined, p);
          }));
  };
  return JsxRuntime.jsxs("li", {
              children: [
                JsxRuntime.jsx(ReactTextareaAutosize, {
                      ref: Caml_option.some(inputRef),
                      className: [
                          Types.todoInputClass,
                          "ml-1 my-1 block text-lg font-black tracking-tight  w-full border-0 px-0 py-0 focus:ring-0 \n               leading-none bg-transparent"
                        ].join(" "),
                      id: Types.getProjectInputId(project.id),
                      style: {
                        resize: "none"
                      },
                      placeholder: "",
                      value: project.name,
                      onKeyDown: onKeyDownInput,
                      onFocus: (function (param) {
                          setSelectedElement(function (param) {
                                return {
                                        TAG: "Todo",
                                        _0: project.id
                                      };
                              });
                          setDisplayElement(function (param) {
                                return {
                                        TAG: "Todo",
                                        _0: project.id
                                      };
                              });
                        }),
                      onBlur: (function (param) {
                          setSelectedElement(function (param) {
                                
                              });
                        }),
                      onChange: (function (e) {
                          updateProject(project.id, (function (t) {
                                  return {
                                          id: t.id,
                                          name: e.target.value,
                                          additionalText: t.additionalText,
                                          isActive: t.isActive,
                                          todos: t.todos,
                                          hideArchived: t.hideArchived,
                                          hideAll: t.hideAll,
                                          hiddenTodos: t.hiddenTodos
                                        };
                                }));
                        })
                    }),
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsx(Tb.TbDragDrop, {}),
                      className: [
                          project.hideAll ? "right-8" : "right-[72px]",
                          "absolute w-4 h-4 text-[var(--t4)] hidden group-hover:block bg-[var(--t0)] rounded-sm "
                        ].join(" "),
                      onMouseDown: (function (e) {
                          projectToMoveHandleMouseDown(project.id, e);
                        })
                    }),
                project.hideAll ? null : JsxRuntime.jsx("button", {
                        children: JsxRuntime.jsx(Tb.TbPlus, {}),
                        className: "absolute right-10 hidden group-hover:block h-4 w-4 text-sm rounded flex-none text-[var(--t4)] bg-[var(--t0)] ",
                        onClick: (function (param) {
                            newTodoAfter(undefined, undefined);
                          })
                      }),
                JsxRuntime.jsx("button", {
                      children: project.hideAll ? JsxRuntime.jsx(Tb.TbChevronDown, {}) : JsxRuntime.jsx(Tb.TbChevronUp, {}),
                      className: "text-sm rounded h-4 w-4 flex-none font-mono flex flex-row justify-center items-center text-[var(--t6)] mr-1",
                      onClick: handleHideAll
                    })
              ],
              ref: Caml_option.some(projectRef),
              className: [
                  Types.listItemClass,
                  "first:mt-1 mt-2",
                  "relative group  flex flex-row justify-between items-center bg-[var(--t0)] px-1 text-[var(--t10)]\n        gap-1 border-b-[var(--t3)] border-t-[var(--t9)]",
                  isSelected ? "outline outline-2 -outline-offset-2 outline-purple-500 focus:outline-blue-500" : ""
                ].join(" "),
              id: Types.getProjectId(project.id),
              tabIndex: 0,
              onKeyDown: onKeyDownProject,
              onFocus: (function (param) {
                  setSelectedElement(function (param) {
                        return {
                                TAG: "Project",
                                _0: project.id
                              };
                      });
                  setDisplayElement(function (param) {
                        return {
                                TAG: "Project",
                                _0: project.id
                              };
                      });
                }),
              onBlur: (function (param) {
                  setSelectedElement(function (param) {
                        
                      });
                }),
              onMouseEnter: (function (e) {
                  projectToMoveHandleMouseEnter(project.id, e);
                  itemToMoveHandleMouseEnter(true, project.id, e);
                })
            }, Types.getProjectId(project.id));
}

var make = Project;

export {
  make ,
}
/* react Not a pure module */
