// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Uuid from "uuid";
import * as Types from "./Types.res.mjs";
import * as React from "react";
import * as Common from "./Common.res.mjs";
import * as Project from "./Project.res.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as DisplayTodo from "./DisplayTodo.res.mjs";
import * as SwitchJsx from "./Switch.jsx";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Belt_MapString from "rescript/lib/es6/belt_MapString.js";
import * as DisplayProject from "./DisplayProject.res.mjs";
import * as Tb from "react-icons/tb";
import * as JsxRuntime from "react/jsx-runtime";

var defaultProjects = [{
    id: "1",
    name: "Project Omega",
    isActive: true
  }];

var defaultTodos = [
  {
    id: "1",
    text: "Do Something",
    project: "1",
    status: "Unsorted",
    box: "Working",
    parentTodo: undefined,
    depth: undefined
  },
  {
    id: "2",
    text: "Do Something Else",
    project: "1",
    status: "ResolveScrap",
    box: "Archive",
    parentTodo: undefined,
    depth: undefined
  }
];

var make = SwitchJsx.Switch;

function buildTodoTree(input) {
  var rootMapId = "_";
  var parentMap = Core__Array.reduce(input, undefined, (function (a, c) {
          var mapId = Core__Option.getOr(c.parentTodo, rootMapId);
          return Belt_MapString.update(a, mapId, (function (v) {
                        return Core__Option.mapOr(v, [c], (function (v) {
                                      return v.concat([c]);
                                    }));
                      }));
        }));
  var mutParentMap = {
    contents: parentMap
  };
  var build = function (arr, mapId, depth) {
    var children = Belt_MapString.get(mutParentMap.contents, mapId);
    mutParentMap.contents = Belt_MapString.remove(mutParentMap.contents, mapId);
    return Core__Array.reduce(Core__Option.getOr(children, []), arr, (function (a, todo) {
                  return build(a.concat([{
                                    id: todo.id,
                                    text: todo.text,
                                    project: todo.project,
                                    status: todo.status,
                                    box: todo.box,
                                    parentTodo: todo.parentTodo,
                                    depth: depth
                                  }]), todo.id, depth + 1 | 0);
                }));
  };
  return build([], rootMapId, 0);
}

function App(props) {
  var match = Common.useLocalStorage("projects", defaultProjects);
  var setProjects = match[1];
  var projects = match[0];
  var match$1 = Common.useLocalStorage("todos", defaultTodos);
  var getTodos = match$1[2];
  var setTodos = match$1[1];
  var todos = match$1[0];
  var match$2 = Common.useLocalStorage("showArchive", []);
  var setShowArchive = match$2[1];
  var showArchive = match$2[0];
  var match$3 = Common.useLocalStorage("projectsTab", "All");
  var setProjectTab = match$3[1];
  var projectsTab = match$3[0];
  var match$4 = React.useState(function () {
        
      });
  var setSelectedElement = match$4[1];
  var selectedElement = match$4[0];
  var match$5 = React.useState(function () {
        
      });
  var setDisplayElement = match$5[1];
  var displayElement = match$5[0];
  var match$6 = React.useState(function () {
        
      });
  var setFocusClassNext = match$6[1];
  var focusClassNext = match$6[0];
  var match$7 = React.useState(function () {
        
      });
  var setFocusIdNext = match$7[1];
  var focusIdNext = match$7[0];
  var updateProject = React.useCallback((function (id, f) {
          setProjects(function (v) {
                return v.map(function (project) {
                            if (project.id === id) {
                              return f(project);
                            } else {
                              return project;
                            }
                          });
              });
        }), []);
  var updateTodo = React.useCallback((function (id, f) {
          setTodos(function (v) {
                return v.map(function (todo) {
                            if (todo.id === id) {
                              return f(todo);
                            } else {
                              return todo;
                            }
                          });
              });
        }), []);
  React.useEffect(function () {
        Core__Option.mapOr(Core__Option.flatMap(focusClassNext, (function (x) {
                    return Array.prototype.slice.call(document.getElementsByClassName(x))[0];
                  })), undefined, (function (element) {
                element.focus();
                setFocusClassNext(function (param) {
                      
                    });
              }));
        Core__Option.mapOr(Core__Option.flatMap(focusIdNext, (function (x) {
                    return Caml_option.nullable_to_opt(document.getElementById(x));
                  })), undefined, (function (element) {
                element.focus();
                setFocusIdNext(function (param) {
                      
                    });
              }));
      });
  var tmp;
  if (displayElement !== undefined) {
    if (displayElement.TAG === "Todo") {
      var todoId = displayElement._0;
      tmp = Core__Option.mapOr(todos.find(function (t) {
                return t.id === todoId;
              }), null, (function (todo) {
              return JsxRuntime.jsx(DisplayTodo.make, {
                          todo: todo,
                          setFocusIdNext: setFocusIdNext,
                          updateTodo: updateTodo,
                          setTodos: setTodos
                        });
            }));
    } else {
      var projectId = displayElement._0;
      tmp = Core__Option.mapOr(projects.find(function (p) {
                return p.id === projectId;
              }), null, (function (project) {
              return JsxRuntime.jsx(DisplayProject.make, {
                          project: project,
                          updateProject: updateProject,
                          setProjects: setProjects,
                          setTodos: setTodos
                        });
            }));
    }
  } else {
    tmp = null;
  }
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsxs("div", {
                                      children: [
                                        JsxRuntime.jsx("div", {
                                              children: "Show Inactive",
                                              className: "text-sm"
                                            }),
                                        JsxRuntime.jsx(make, {
                                              checked: projectsTab === "All",
                                              onCheckedChange: (function () {
                                                  setProjectTab(function (v) {
                                                        if (v === "All") {
                                                          return "Active";
                                                        } else {
                                                          return "All";
                                                        }
                                                      });
                                                })
                                            })
                                      ],
                                      className: "flex flex-row gap-2 "
                                    }),
                                JsxRuntime.jsxs("button", {
                                      children: [
                                        JsxRuntime.jsx(Tb.TbPlus, {}),
                                        "Project"
                                      ],
                                      className: ["bg-[var(--t2)] px-2 rounded text-xs flex flex-row items-center gap-1"].join(" "),
                                      onClick: (function (param) {
                                          var newProjectId = Uuid.v4();
                                          setProjects(function (v) {
                                                return [{
                                                            id: newProjectId,
                                                            name: "",
                                                            isActive: true
                                                          }].concat(v);
                                              });
                                          setSelectedElement(function (param) {
                                                return {
                                                        TAG: "Project",
                                                        _0: newProjectId
                                                      };
                                              });
                                          setDisplayElement(function (param) {
                                                return {
                                                        TAG: "Project",
                                                        _0: newProjectId
                                                      };
                                              });
                                          setFocusClassNext(function (param) {
                                                return "class-display-title";
                                              });
                                        })
                                    })
                              ],
                              className: "flex flex-row gap-2 justify-between w-full p-1"
                            }),
                        JsxRuntime.jsx("div", {
                              children: projects.filter(function (project) {
                                      if (projectsTab === "Active") {
                                        return project.isActive;
                                      } else {
                                        return true;
                                      }
                                    }).map(function (project) {
                                    var showArchive$1 = showArchive.includes(project.id);
                                    return JsxRuntime.jsx(Project.make, {
                                                project: project,
                                                todos: buildTodoTree(todos.filter(function (todo) {
                                                            return todo.project === project.id;
                                                          }).filter(function (todo) {
                                                          if (showArchive$1) {
                                                            return true;
                                                          } else {
                                                            return todo.box !== "Archive";
                                                          }
                                                        })),
                                                showArchive: showArchive$1,
                                                setShowArchive: setShowArchive,
                                                updateProject: updateProject,
                                                updateTodo: updateTodo,
                                                selectedElement: selectedElement,
                                                setSelectedElement: setSelectedElement,
                                                displayElement: displayElement,
                                                setDisplayElement: setDisplayElement,
                                                setFocusIdNext: setFocusIdNext,
                                                setTodos: setTodos,
                                                getTodos: getTodos
                                              }, Types.getProjectId(project.id));
                                  })
                            })
                      ],
                      className: "flex-1"
                    }),
                JsxRuntime.jsx("div", {
                      children: tmp,
                      className: " border-l flex-1"
                    })
              ],
              className: "flex flex-row h-dvh"
            });
}

var make$1 = App;

export {
  make$1 as make,
}
/* make Not a pure module */
